{"ast":null,"code":"// redux/modules/todos.js\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nexport const __getTodos = createAsyncThunk(\"todos/getTodos\", async (payload, thunkAPI) => {\n  try {\n    const data = await axios.get(\"http://localhost:3001/todos\");\n    return thunkAPI.fulfillWithValue(data.data);\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error);\n  }\n});\nexport const todosSlice = createSlice({\n  name: \"todos\",\n  initialState: {\n    todos: [],\n    isLoading: false,\n    error: null\n  },\n  reducers: {\n    addTodo(state, action) {\n      state.todos.push(action.payload);\n      axios.post(\"http://localhost:3001/todos\", action.payload);\n    },\n\n    deleteTodo(state, action) {\n      let index = state.todos.findIndex(todo => todo.id === action.payload);\n      state.todos.splice(index, 1);\n      axios.delete(`http://localhost:3001/todos/${action.payload}`);\n    }\n\n  },\n  extraReducers: {\n    [__getTodos.pending]: state => {\n      state.isLoading = true; // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n    },\n    [__getTodos.fulfilled]: (state, action) => {\n      state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n\n      state.todos = action.payload; // Store에 있는 todos에 서버에서 가져온 todos를 넣습니다.\n    },\n    [__getTodos.rejected]: (state, action) => {\n      state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n\n      state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n    }\n  }\n});\nexport const {\n  addTodo,\n  deleteTodo\n} = todosSlice.actions;\nexport default todosSlice.reducer; // import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n// const initialState = {\n//   todos: [],\n//   isLoading: false,\n//   error: null,\n// };\n// export const __getTodos = createAsyncThunk(\n//   \"todos/getTodos\",\n//   (payload, thunkAPI) => {}\n// );\n// export const todos = createSlice({\n//   name: \"todos\",\n//   initialState: [\n//     // {\n//     //   id: 0,\n//     //   writer: \"\",\n//     //   title: \"\",\n//     //   body: \"\",\n//     // },\n//   ], // ':' 뒤에 다 지워야하는지\n//   reducers: {\n//     addTodo(state, action) {\n//       state.push(action.payload);\n//     },\n//     deleteTodo(state, action) {\n//       let index = state.findIndex((todo) => todo.id === action.payload);\n//       state.splice(index, 1);\n//     },\n//   },\n//   extraReducers: {},\n// });\n// export const { addTodo, deleteTodo } = todos.actions;\n// export default todos;","map":{"version":3,"names":["createAsyncThunk","createSlice","axios","__getTodos","payload","thunkAPI","data","get","fulfillWithValue","error","rejectWithValue","todosSlice","name","initialState","todos","isLoading","reducers","addTodo","state","action","push","post","deleteTodo","index","findIndex","todo","id","splice","delete","extraReducers","pending","fulfilled","rejected","actions","reducer"],"sources":["/Users/lenkokukyojulo/Desktop/sparta_react/com/React-homework-03/src/redux/modules/todo.js"],"sourcesContent":["// redux/modules/todos.js\n\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\nexport const __getTodos = createAsyncThunk(\n  \"todos/getTodos\",\n  async (payload, thunkAPI) => {\n    try {\n      const data = await axios.get(\"http://localhost:3001/todos\");\n      return thunkAPI.fulfillWithValue(data.data);\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error);\n    }\n  }\n);\n\nexport const todosSlice = createSlice({\n  name: \"todos\",\n  initialState: {\n    todos: [],\n    isLoading: false,\n    error: null,\n  },\n  reducers: {\n    addTodo(state, action) {\n      state.todos.push(action.payload);\n      axios.post(\"http://localhost:3001/todos\", action.payload);\n    },\n    deleteTodo(state, action) {\n      let index = state.todos.findIndex((todo) => todo.id === action.payload);\n      state.todos.splice(index, 1);\n      axios.delete(`http://localhost:3001/todos/${action.payload}`);\n    },\n  },\n  extraReducers: {\n    [__getTodos.pending]: (state) => {\n      state.isLoading = true; // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n    },\n    [__getTodos.fulfilled]: (state, action) => {\n      state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.todos = action.payload; // Store에 있는 todos에 서버에서 가져온 todos를 넣습니다.\n    },\n    [__getTodos.rejected]: (state, action) => {\n      state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n    },\n  },\n});\n\nexport const { addTodo, deleteTodo } = todosSlice.actions;\nexport default todosSlice.reducer;\n\n// import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n\n// const initialState = {\n//   todos: [],\n//   isLoading: false,\n//   error: null,\n// };\n\n// export const __getTodos = createAsyncThunk(\n//   \"todos/getTodos\",\n//   (payload, thunkAPI) => {}\n// );\n\n// export const todos = createSlice({\n//   name: \"todos\",\n//   initialState: [\n//     // {\n//     //   id: 0,\n//     //   writer: \"\",\n//     //   title: \"\",\n//     //   body: \"\",\n//     // },\n//   ], // ':' 뒤에 다 지워야하는지\n\n//   reducers: {\n//     addTodo(state, action) {\n//       state.push(action.payload);\n//     },\n//     deleteTodo(state, action) {\n//       let index = state.findIndex((todo) => todo.id === action.payload);\n//       state.splice(index, 1);\n//     },\n//   },\n\n//   extraReducers: {},\n// });\n\n// export const { addTodo, deleteTodo } = todos.actions;\n// export default todos;\n"],"mappings":"AAAA;AAEA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,UAAU,GAAGH,gBAAgB,CACxC,gBADwC,EAExC,OAAOI,OAAP,EAAgBC,QAAhB,KAA6B;EAC3B,IAAI;IACF,MAAMC,IAAI,GAAG,MAAMJ,KAAK,CAACK,GAAN,CAAU,6BAAV,CAAnB;IACA,OAAOF,QAAQ,CAACG,gBAAT,CAA0BF,IAAI,CAACA,IAA/B,CAAP;EACD,CAHD,CAGE,OAAOG,KAAP,EAAc;IACd,OAAOJ,QAAQ,CAACK,eAAT,CAAyBD,KAAzB,CAAP;EACD;AACF,CATuC,CAAnC;AAYP,OAAO,MAAME,UAAU,GAAGV,WAAW,CAAC;EACpCW,IAAI,EAAE,OAD8B;EAEpCC,YAAY,EAAE;IACZC,KAAK,EAAE,EADK;IAEZC,SAAS,EAAE,KAFC;IAGZN,KAAK,EAAE;EAHK,CAFsB;EAOpCO,QAAQ,EAAE;IACRC,OAAO,CAACC,KAAD,EAAQC,MAAR,EAAgB;MACrBD,KAAK,CAACJ,KAAN,CAAYM,IAAZ,CAAiBD,MAAM,CAACf,OAAxB;MACAF,KAAK,CAACmB,IAAN,CAAW,6BAAX,EAA0CF,MAAM,CAACf,OAAjD;IACD,CAJO;;IAKRkB,UAAU,CAACJ,KAAD,EAAQC,MAAR,EAAgB;MACxB,IAAII,KAAK,GAAGL,KAAK,CAACJ,KAAN,CAAYU,SAAZ,CAAuBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYP,MAAM,CAACf,OAAnD,CAAZ;MACAc,KAAK,CAACJ,KAAN,CAAYa,MAAZ,CAAmBJ,KAAnB,EAA0B,CAA1B;MACArB,KAAK,CAAC0B,MAAN,CAAc,+BAA8BT,MAAM,CAACf,OAAQ,EAA3D;IACD;;EATO,CAP0B;EAkBpCyB,aAAa,EAAE;IACb,CAAC1B,UAAU,CAAC2B,OAAZ,GAAuBZ,KAAD,IAAW;MAC/BA,KAAK,CAACH,SAAN,GAAkB,IAAlB,CAD+B,CACP;IACzB,CAHY;IAIb,CAACZ,UAAU,CAAC4B,SAAZ,GAAwB,CAACb,KAAD,EAAQC,MAAR,KAAmB;MACzCD,KAAK,CAACH,SAAN,GAAkB,KAAlB,CADyC,CAChB;;MACzBG,KAAK,CAACJ,KAAN,GAAcK,MAAM,CAACf,OAArB,CAFyC,CAEX;IAC/B,CAPY;IAQb,CAACD,UAAU,CAAC6B,QAAZ,GAAuB,CAACd,KAAD,EAAQC,MAAR,KAAmB;MACxCD,KAAK,CAACH,SAAN,GAAkB,KAAlB,CADwC,CACf;;MACzBG,KAAK,CAACT,KAAN,GAAcU,MAAM,CAACf,OAArB,CAFwC,CAEV;IAC/B;EAXY;AAlBqB,CAAD,CAA9B;AAiCP,OAAO,MAAM;EAAEa,OAAF;EAAWK;AAAX,IAA0BX,UAAU,CAACsB,OAA3C;AACP,eAAetB,UAAU,CAACuB,OAA1B,C,CAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA"},"metadata":{},"sourceType":"module"}